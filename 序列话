package 序列化.java;
package 序列化.java;
import java.io.Serializable; 
public class 序列化 implements Serializable {//父类实现了序列化 
　/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
int supervalue; 
　public 序列化(int supervalue) { 
　　this.supervalue = supervalue; 
　} 
　public String toString() { 
　　return "supervalue: "+supervalue; 
　} 
} 

public class SubC extends 序列化 {//子类 
　/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
int subvalue; 

　public SubC(int supervalue,int subvalue) { 
　　super(supervalue); 
　　this.subvalue=subvalue; 
　} 

　public String toString() { 
　　return super.toString()+" sub: "+subvalue; 
　} 
} 
public abstract class SuperC { 
	　int supervalue; 
	　public SuperC(int supervalue) { 
	　　this.supervalue = supervalue; 
	　}
	　public SuperC(){}//增加一个无参的constructor 
	　　public String toString() { 
	　　　return "supervalue: "+supervalue; 
	　　} 
	　} 

	　public class SubC extends SuperC implements Serializable { 
	　　int subvalue; 

	　　public SubC(int supervalue,int subvalue) { 
	　　　super(supervalue); 
	　　　this.subvalue=subvalue; 
	　　} 

	　　public String toString() { 
	　　　return super.toString()+" sub: "+subvalue; 
	　　} 

	　　private void writeObject(java.io.ObjectOutputStream out) 
	　　throws IOException{ 
	　　　out.defaultWriteObject();//先序列化对象 
	　　　out.writeInt(supervalue);//再序列化父类的域 
	　　} 
	　　private void readObject(java.io.ObjectInputStream in) 
	　　throws IOException, ClassNotFoundException{ 
	　　　in.defaultReadObject();//先反序列化对象 
	　　　supervalue=in.readInt();//再反序列化父类的域 
	　　} 
	}
public class 序列化 {

}
public class BaseBean   {
	   public String property1;
	   public String property2;
	   public int property3;

	   public BaseBean(String id){

	   }

	   public BaseBean(){}

	}
	public class TestBean extends BaseBean implements Serializable {
	    public String desc;
	    public static final int serialVersionUID = 1;

	    public TestBean(String id) {
	        super(id);
	    }

	    @Override
	    public String toString() {
	        return "TestBean{" +
	                "desc='" + desc + '\'' +
	                ", property1='" + property1 + '\'' +
	                ", property2='" + property2 + '\'' +
	                ", property3=" + property3 +
	                '}';
	    }

	    private void writeObject(java.io.ObjectOutputStream out)
	            throws IOException {
	        out.defaultWriteObject();//先序列化对象
	        out.writeUTF(property1);//再序列化父类的域
	        out.writeUTF(property2);
	        out.writeInt(property3);
	    }

	    private void readObject(java.io.ObjectInputStream in)
	            throws IOException, ClassNotFoundException {
	        in.defaultReadObject();//先反序列化对象
	       property1 = in.readUTF();//再反序列化父类的域
	       property2 = in.readUTF();
	        property3=  in.readInt();
	    }

	}
	 public void serialization(View view) {
	        try {

	            TestBean testBean = new TestBean("");
	            testBean.property1 = "属性88999988-property1__";
	            testBean.property2 = "属性88999988-property2__";
	            testBean.desc = "我是testbean88999988-desc__";
	            testBean.property3 = 88888803;

	            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("/sdcard/aaatest.txt"));
	            objectOutputStream.writeObject(testBean);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    public void deserialization(View view) {
	        ObjectInputStream objectInputStream = null;
	        try {
	            objectInputStream = new ObjectInputStream(new FileInputStream("/sdcard/aaatest.txt"));
	            TestBean testBean = (TestBean) objectInputStream.readObject();
	            Log.i(TAG,"deserialization"+testBean.toString());
	        } catch (Exception e) {
	            e.printStackTrace();
              
              
	    
